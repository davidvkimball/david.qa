/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var C=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var v=(u,h)=>{for(var t in h)C(u,t,{get:h[t],enumerable:!0})},D=(u,h,t,e)=>{if(h&&typeof h=="object"||typeof h=="function")for(let s of b(h))!y.call(u,s)&&s!==t&&C(u,s,{get:()=>h[s],enumerable:!(e=P(h,s))||e.enumerable});return u};var E=u=>D(C({},"__esModule",{value:!0}),u);var $={};v($,{default:()=>w});module.exports=E($);var n=require("obsidian"),T={enableUnderscorePrefix:!1,defaultTemplate:`---
title: "{{title}}"
date: {{date}}
description: ""
tags: []
---

`,linkBasePath:"/blog/",postsFolder:"posts",automatePostCreation:!0,autoInsertProperties:!0,creationMode:"file",indexFileName:"index",dateFormat:"YYYY-MM-DD",excludedDirectories:"",onlyAutomateInPostsFolder:!1},w=class extends n.Plugin{async onload(){await this.loadSettings();let t=document.createElement("link");t.rel="stylesheet",t.href=this.manifest.dir+"/styles.css",document.head.appendChild(t),this.registerCreateEvent(),this.addCommand({id:"standardize-properties",name:"Standardize Properties",editorCallback:(e,s)=>{s.file instanceof n.TFile&&this.standardizeProperties(s.file)}}),this.addCommand({id:"convert-wikilinks-astro",name:"Convert internal links for Astro",editorCallback:(e,s)=>{s.file instanceof n.TFile&&this.convertWikilinksForAstro(e,s.file)}}),this.addSettingTab(new x(this.app,this))}registerCreateEvent(){this.createEvent&&this.app.vault.off("create",this.createEvent),this.settings.automatePostCreation&&(this.createEvent=t=>{if(t instanceof n.TFile&&t.extension==="md"){let e=t.path,s=this.settings.postsFolder||"";if(this.settings.onlyAutomateInPostsFolder){if(!s||e.startsWith(s+"/")||e===s){let o=this.app.metadataCache.getCache(t.path);(!o||!o.sections||o.sections.length===0)&&new F(this.app,t,this).open()}}else if(!this.settings.excludedDirectories.split("|").map(i=>i.trim()).filter(i=>i.length>0).some(i=>e.startsWith(i+"/")||e===i)){let i=this.app.metadataCache.getCache(t.path);(!i||!i.sections||i.sections.length===0)&&new F(this.app,t,this).open()}}},this.registerEvent(this.app.vault.on("create",this.createEvent)))}toKebabCase(t){return t.toLowerCase().replace(/[^a-z0-9\s-]/g,"").trim().replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"")}async createPostFile(t,e){if(!e)return new n.Notice("Title is required to create a post."),null;let s=this.toKebabCase(e),o=this.settings.enableUnderscorePrefix?"_":"",d=this.settings.postsFolder||"";if(d&&(this.app.vault.getAbstractFileByPath(d)instanceof n.TFolder||await this.app.vault.createFolder(d)),this.settings.creationMode==="folder"){let i=`${o}${s}`,p=d?`${d}/${i}`:i;try{this.app.vault.getAbstractFileByPath(p)instanceof n.TFolder||await this.app.vault.createFolder(p)}catch(r){}let a=`${this.settings.indexFileName}.md`,l=`${p}/${a}`;if(this.app.vault.getAbstractFileByPath(l)instanceof n.TFile)return new n.Notice(`File already exists at ${l}.`),null;try{await this.app.vault.rename(t,l);let r=this.app.vault.getAbstractFileByPath(l);return r instanceof n.TFile?(setTimeout(()=>{let g=this.app.workspace.getLeavesOfType("file-explorer")[0];if(g&&g.view){let f=g.view.tree;f&&r instanceof n.TFile&&f.revealFile(r)}},200),await this.app.workspace.getLeaf(!1).openFile(r),this.settings.autoInsertProperties&&await this.addPropertiesToFile(r,e),r):null}catch(r){return new n.Notice(`Failed to create folder structure: ${r.message}.`),null}}else{let i=`${o}${s}.md`,p=d?`${d}/${i}`:i,a=this.app.vault.getAbstractFileByPath(p);if(a instanceof n.TFile&&a!==t)return new n.Notice(`File with name "${i}" already exists.`),null;try{await this.app.vault.rename(t,p);let l=this.app.vault.getAbstractFileByPath(p);return l instanceof n.TFile?(await this.app.workspace.getLeaf(!1).openFile(l),this.settings.autoInsertProperties&&await this.addPropertiesToFile(l,e),l):null}catch(l){return new n.Notice(`Failed to rename file: ${l.message}.`),null}}}async addPropertiesToFile(t,e,s){let o=new Date,d=window.moment(o).format(this.settings.dateFormat),i=this.settings.defaultTemplate;i=i.replace(/\{\{title\}\}/g,e),i=i.replace(/\{\{date\}\}/g,d),i.endsWith(`

`)||(i=i.replace(/\n*$/,`

`)),await this.app.vault.modify(t,i)}async standardizeProperties(t){if(!(t instanceof n.TFile)){new n.Notice("No active file.");return}let e=await this.app.vault.read(t),s=t.basename.replace(/^_/,""),o=0,d={};if(e.startsWith("---")){let l=e.indexOf(`
---`,3);if(l!==-1){o=l+4;let c=e.slice(4,l);try{c.split(`
`).forEach(r=>{let m=r.match(/^(\w+):\s*(.+)$/);if(m){let[,g,f]=m;d[g]=f.replace(/^["'\[\]]|["'\[\]]$/g,"")}})}catch(r){new n.Notice("Failed to parse existing properties.")}}}let i=this.settings.defaultTemplate;i=i.replace(/\{\{title\}\}/g,d.title||s),i=i.replace(/\{\{date\}\}/g,d.date||window.moment(new Date).format(this.settings.dateFormat)),i.endsWith(`

`)||(i=i.replace(/\n*$/,`

`));let p=e.slice(o),a=i+(i.endsWith(`
`)?"":`
`)+p;await this.app.vault.modify(t,a),new n.Notice("Properties standardized using template.")}async convertWikilinksForAstro(t,e){if(!(e instanceof n.TFile)){new n.Notice("No active file.");return}let o=t.getValue();o=o.replace(/\[\[([^\]|]+)(\|([^\]]+))?\]\]/g,(d,i,p,a)=>{let l=a||i,c=this.settings.linkBasePath;c.startsWith("/")||(c="/"+c),c.endsWith("/")||(c=c+"/");let r=this.settings.postsFolder?`${this.settings.postsFolder}/`:"",m=this.settings.indexFileName||"index";if(r&&i.startsWith(r)&&i.endsWith(`/${m}`)){let g=i.slice(r.length,-(m.length+1));return`[${l}](${c}${g}/)`}else{let g=this.toKebabCase(i);return`[${l}](${c}${g}/)`}}),o=o.replace(/\[(.*?)\]\(([^)]+\.md)\)/g,(d,i,p)=>{let a=this.settings.linkBasePath;a.startsWith("/")||(a="/"+a),a.endsWith("/")||(a=a+"/");let l=p.replace(/^\.\.?\//,"").replace(/\.md$/,"").replace(/^\/|\/$/,""),c=this.settings.indexFileName||"index";if(l.endsWith(`/${c}`)){let r=l.slice(0,-(c.length+1));return`[${i}](${a}${r}/)`}else{let r=this.toKebabCase(l);return`[${i}](${a}${r}/)`}}),o=o.replace(/\{\{([^}]+)\}\}/g,(d,i)=>{let p=this.toKebabCase(i.replace(".md","")),a=this.settings.linkBasePath;return a.startsWith("/")||(a="/"+a),a.endsWith("/")||(a=a+"/"),`[Embedded: ${i}](${a}${p}/)`}),t.setValue(o),new n.Notice("All internal links converted for Astro.")}async loadSettings(){this.settings=Object.assign({},T,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},F=class extends n.Modal{constructor(t,e,s){super(t);this.file=e,this.plugin=s}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"New Blog Post"}),t.createEl("p",{text:"Enter a title for your blog post:"}),this.titleInput=t.createEl("input",{type:"text",placeholder:"My Awesome Blog Post",cls:"astro-composer-title-input"}),this.titleInput.focus();let e=t.createDiv({cls:"astro-composer-button-container"}),s=e.createEl("button",{text:"Cancel",cls:"astro-composer-cancel-button"});s.onclick=()=>this.close();let o=e.createEl("button",{text:"Create",cls:["astro-composer-create-button","mod-cta"]});o.onclick=()=>this.createPost(),this.titleInput.addEventListener("keypress",d=>{d.key==="Enter"&&this.createPost()})}async createPost(){let t=this.titleInput.value.trim();if(!t){new n.Notice("Please enter a title.");return}try{let e=await this.plugin.createPostFile(this.file,t);e&&this.plugin.settings.autoInsertProperties&&await this.plugin.addPropertiesToFile(e,t)}catch(e){new n.Notice(`Error creating post: ${e.message}.`)}this.close()}onClose(){let{contentEl:t}=this;t.empty()}},x=class extends n.PluginSettingTab{constructor(t,e){super(t,e);this.autoRenameContainer=null;this.postsFolderContainer=null;this.onlyAutomateContainer=null;this.creationModeContainer=null;this.indexFileContainer=null;this.excludedDirsContainer=null;this.underscorePrefixContainer=null;this.autoInsertContainer=null;this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new n.Setting(t).setName("Automate post creation").setDesc("Automatically show title dialog for new .md files, rename them based on the title, and insert properties if enabled.").addToggle(e=>e.setValue(this.plugin.settings.automatePostCreation).onChange(async s=>{this.plugin.settings.automatePostCreation=s,this.plugin.settings.autoInsertProperties=s,await this.plugin.saveSettings(),this.plugin.registerCreateEvent(),this.updateConditionalFields()})),this.autoRenameContainer=t.createDiv({cls:"auto-rename-fields"}),this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none",this.autoInsertContainer=this.autoRenameContainer.createDiv(),new n.Setting(this.autoInsertContainer).setName("Auto-insert properties").setDesc("Automatically insert the properties template when creating new files (requires 'Automate post creation' to be enabled).").addToggle(e=>e.setValue(this.plugin.settings.autoInsertProperties).setDisabled(!this.plugin.settings.automatePostCreation).onChange(async s=>{this.plugin.settings.autoInsertProperties=s,await this.plugin.saveSettings()})),this.postsFolderContainer=this.autoRenameContainer.createDiv(),new n.Setting(this.postsFolderContainer).setName("Posts folder").setDesc("Folder name for blog posts (leave blank to use the vault folder). You can specify the default location for new notes in Obsidian's 'Files and links' settings.").addText(e=>e.setPlaceholder("posts").setValue(this.plugin.settings.postsFolder).onChange(async s=>{this.plugin.settings.postsFolder=s,await this.plugin.saveSettings()})),this.onlyAutomateContainer=this.autoRenameContainer.createDiv(),new n.Setting(this.onlyAutomateContainer).setName("Only automate in this folder").setDesc("When enabled, automation will only trigger for new .md files within the specified Posts folder and subfolders.").addToggle(e=>e.setValue(this.plugin.settings.onlyAutomateInPostsFolder).onChange(async s=>{this.plugin.settings.onlyAutomateInPostsFolder=s,await this.plugin.saveSettings(),this.updateExcludedDirsField()})),this.excludedDirsContainer=this.autoRenameContainer.createDiv({cls:"excluded-dirs-field"}),this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block",new n.Setting(this.excludedDirsContainer).setName("Excluded directories").setDesc("Directories to exclude from automatic post creation (e.g., pages|posts/example). Excluded directories and their child folders will be ignored. Use '|' to separate multiple directories.").addText(e=>e.setPlaceholder("pages|posts/example").setValue(this.plugin.settings.excludedDirectories).onChange(async s=>{this.plugin.settings.excludedDirectories=s,await this.plugin.saveSettings()})),this.creationModeContainer=this.autoRenameContainer.createDiv(),new n.Setting(this.creationModeContainer).setName("Creation mode").setDesc("How to create new posts: file-based or folder-based with index.md.").addDropdown(e=>e.addOption("file","File-based (post-title.md)").addOption("folder","Folder-based (post-title/index.md)").setValue(this.plugin.settings.creationMode).onChange(async s=>{this.plugin.settings.creationMode=s,await this.plugin.saveSettings(),this.updateIndexFileField()})),this.indexFileContainer=this.autoRenameContainer.createDiv({cls:"index-file-field"}),this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none",new n.Setting(this.indexFileContainer).setName("Index file name").setDesc("Name for the main file in folder-based mode (without .md extension).").addText(e=>e.setPlaceholder("index").setValue(this.plugin.settings.indexFileName).onChange(async s=>{this.plugin.settings.indexFileName=s||"index",await this.plugin.saveSettings()})),this.underscorePrefixContainer=this.autoRenameContainer.createDiv(),new n.Setting(this.underscorePrefixContainer).setName("Use underscore prefix for drafts").setDesc("Add an underscore prefix (_post-title) to new notes by default when enabled. This hides them from Astro, which can be helpful for post drafts. Disable to skip prefixing.").addToggle(e=>e.setValue(this.plugin.settings.enableUnderscorePrefix).onChange(async s=>{this.plugin.settings.enableUnderscorePrefix=s,await this.plugin.saveSettings()})),new n.Setting(t).setName("Link base path").setDesc("Base path for converted links (e.g., /blog/, leave blank for root domain).").addText(e=>e.setPlaceholder("/blog/").setValue(this.plugin.settings.linkBasePath).onChange(async s=>{this.plugin.settings.linkBasePath=s,await this.plugin.saveSettings()})),new n.Setting(t).setName("Date format").setDesc("Format for the date in properties (e.g., YYYY-MM-DD, MMMM D, YYYY, YYYY-MM-DD hh:mm a).").addText(e=>e.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async s=>{this.plugin.settings.dateFormat=s||"YYYY-MM-DD",await this.plugin.saveSettings()})),new n.Setting(t).setName("Properties template").setDesc("Used for new posts and when standardizing properties.").addTextArea(e=>{let s=this.plugin;e.setPlaceholder(`---
title: "{{title}}"
date: {{date}}
description: ""
tags: []
---
`).setValue(s.settings.defaultTemplate).onChange(async o=>{s.settings.defaultTemplate=o,await s.saveSettings()}),e.inputEl.classList.add("astro-composer-template-textarea")}),this.updateConditionalFields(),this.updateIndexFileField(),this.updateExcludedDirsField()}updateConditionalFields(){this.autoRenameContainer&&(this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none")}updateIndexFileField(){this.indexFileContainer&&(this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none")}updateExcludedDirsField(){this.excludedDirsContainer&&(this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block")}};
