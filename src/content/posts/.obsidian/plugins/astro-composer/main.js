/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var A=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var Y=Object.getOwnPropertyNames;var L=Object.prototype.hasOwnProperty;var V=(b,w)=>{for(var s in w)A(b,s,{get:w[s],enumerable:!0})},B=(b,w,s,e)=>{if(w&&typeof w=="object"||typeof w=="function")for(let t of Y(w))!L.call(b,t)&&t!==s&&A(b,t,{get:()=>w[t],enumerable:!(e=S(w,t))||e.enumerable});return b};var W=b=>B(A({},"__esModule",{value:!0}),b);var H={};V(H,{default:()=>k});module.exports=W(H);var i=require("obsidian"),R={enableUnderscorePrefix:!1,defaultTemplate:`---
title: "{{title}}"
date: {{date}}
tags: []
---
`,linkBasePath:"/blog/",postsFolder:"posts",automatePostCreation:!0,autoInsertProperties:!0,creationMode:"file",indexFileName:"index",dateFormat:"YYYY-MM-DD",excludedDirectories:"",onlyAutomateInPostsFolder:!1,enablePages:!1,pagesFolder:"pages",pageTemplate:`---
title: "{{title}}"
description: ""
---
`},k=class extends i.Plugin{async onload(){await this.loadSettings(),this.app.workspace.onLayoutReady(()=>{this.registerCreateEvent()}),this.addCommand({id:"standardize-properties",name:"Standardize Properties",icon:"file-check",editorCallback:(s,e)=>{e.file instanceof i.TFile&&this.standardizeProperties(e.file)}}),this.addCommand({id:"convert-wikilinks-astro",name:"Convert internal links for Astro",icon:"link-2",editorCallback:(s,e)=>{e.file instanceof i.TFile&&this.convertWikilinksForAstro(s,e.file)}}),this.addSettingTab(new M(this.app,this))}registerCreateEvent(){if(this.createEvent&&this.app.vault.off("create",this.createEvent),this.settings.automatePostCreation||this.settings.enablePages){let s=0,e=500;this.createEvent=async t=>{let l=Date.now();if(!(l-s<e)&&(s=l,t instanceof i.TFile&&t.extension==="md")){let h=t.path,o=await this.app.vault.adapter.stat(t.path),g=(o==null?void 0:o.mtime)&&l-o.mtime<1e3,p=(await this.app.vault.read(t)).trim()==="";if(!g||!p)return;let n=this.settings.postsFolder||"",m=this.settings.enablePages&&this.settings.pagesFolder||"",r=!1;m&&(h.startsWith(m+"/")||h===m)&&(r=!0);let y=this.app.metadataCache.getCache(t.path);if(!y||!y.sections||y.sections.length===0)if(r)this.settings.enablePages&&new T(this.app,t,this,"page").open();else if(this.settings.onlyAutomateInPostsFolder)(!n||h.startsWith(n+"/")||h===n)&&new T(this.app,t,this,"post").open();else{let f=this.settings.excludedDirectories.split("|").map(P=>P.trim()).filter(P=>P.length>0);m&&f.push(m),f.some(P=>h.startsWith(P+"/")||h===P)||new T(this.app,t,this,"post").open()}}},this.registerEvent(this.app.vault.on("create",this.createEvent))}}toKebabCase(s){return s.toLowerCase().replace(/[^a-z0-9\s-]/g,"").trim().replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"")}async createFile(s,e,t){if(!e)return new i.Notice(`Title is required to create a ${t}.`),null;let l=this.toKebabCase(e),h=this.settings.enableUnderscorePrefix?"_":"",o=t==="post"?this.settings.postsFolder||"":this.settings.pagesFolder||"";if(o&&(this.app.vault.getAbstractFileByPath(o)instanceof i.TFolder||await this.app.vault.createFolder(o)),this.settings.creationMode==="folder"){let g=`${h}${l}`,c=o?`${o}/${g}`:g;try{this.app.vault.getAbstractFileByPath(c)instanceof i.TFolder||await this.app.vault.createFolder(c)}catch(r){}let p=`${this.settings.indexFileName}.md`,n=`${c}/${p}`;if(this.app.vault.getAbstractFileByPath(n)instanceof i.TFile)return new i.Notice(`File already exists at ${n}.`),null;try{await this.app.vault.rename(s,n);let r=this.app.vault.getAbstractFileByPath(n);return r instanceof i.TFile?(setTimeout(()=>{let f=this.app.workspace.getLeavesOfType("file-explorer")[0];if(f&&f.view){let v=f.view.tree;v&&r instanceof i.TFile&&v.revealFile(r)}},200),await this.app.workspace.getLeaf(!1).openFile(r),this.settings.autoInsertProperties&&await this.addPropertiesToFile(r,e,t),r):null}catch(r){return new i.Notice(`Failed to create folder structure: ${r.message}.`),null}}else{let g=`${h}${l}.md`,c=o?`${o}/${g}`:g,p=this.app.vault.getAbstractFileByPath(c);if(p instanceof i.TFile&&p!==s)return new i.Notice(`File with name "${g}" already exists.`),null;try{await this.app.vault.rename(s,c);let n=this.app.vault.getAbstractFileByPath(c);return n instanceof i.TFile?(await this.app.workspace.getLeaf(!1).openFile(n),this.settings.autoInsertProperties&&await this.addPropertiesToFile(n,e,t),n):null}catch(n){return new i.Notice(`Failed to rename file: ${n.message}.`),null}}}async addPropertiesToFile(s,e,t="post"){let l=new Date,h=window.moment(l).format(this.settings.dateFormat),o=t==="post"?this.settings.defaultTemplate:this.settings.pageTemplate;o=o.replace(/\{\{title\}\}/g,e),o=o.replace(/\{\{date\}\}/g,h),await this.app.vault.modify(s,o)}async standardizeProperties(s){var $;if(!(s instanceof i.TFile)){new i.Notice("No active file.");return}let e=s.path,t=this.settings.pagesFolder||"",h=this.settings.enablePages&&t&&(e.startsWith(t+"/")||e===t)?this.settings.pageTemplate:this.settings.defaultTemplate;await new Promise(a=>setTimeout(a,100));let o=await this.app.vault.read(s),g=s.basename.replace(/^_/,""),c=0,p="",n={},m=["tags","aliases","cssclasses"];if(o.startsWith("---")){c=o.indexOf(`
---`,3),c===-1?c=o.length:c+=4,p=o.slice(4,c-4).trim();try{let a=null;p.split(`
`).forEach(d=>{let F=d.match(/^(\w+):\s*(.+)?$/);if(F){let[,u,C]=F;a=u,m.includes(u)?n[u]=[]:n[u]=[C?C.trim():""]}else if(a&&m.includes(a)&&d.trim().startsWith("- ")){let u=d.trim().replace(/^-\s*/,"");u&&n[a].push(u)}else if(d.trim()&&!d.trim().startsWith("- ")){let u=d.match(/^(\w+):/);if(u){let C=u[1],E=d.slice(d.indexOf(":")+1).trim();n[C]||(n[C]=[E||""])}}}),m.forEach(d=>{p.includes(d+":")&&!n[d]&&(n[d]=[])})}catch(a){new i.Notice("Falling back to template due to parsing error.")}}let r=h.split(`
`),y=[],f={},v=!1;for(let a=0;a<r.length;a++){let d=r[a].trim();if(d==="---"){if(v=!v,!v)break;continue}if(v){let F=d.match(/^(\w+):\s*(.+)?$/);if(F){let[,u,C]=F;if(y.push(u),m.includes(u))if(C&&C.startsWith("[")){let E=C.replace(/[\[\]]/g,"").split(",").map(D=>D.trim()).filter(D=>D);f[u]=E}else{f[u]=[];for(let E=a+1;E<r.length;E++){let D=r[E].trim();if(D.startsWith("- ")){let I=D.replace(/^-\s*/,"").trim();I&&f[u].push(I)}else if(D==="---")break}}else f[u]=[(C||"").replace(/\{\{title\}\}/g,g).replace(/\{\{date\}\}/g,window.moment(new Date).format(this.settings.dateFormat))]}}}let P={...n};for(let a of y)if(!(a in n))P[a]=f[a]||(m.includes(a)?[]:[""]);else if(m.includes(a)&&(($=f[a])==null?void 0:$.length)>0){let d=n[a]||[],F=f[a].filter(u=>!d.includes(u));P[a]=[...d,...F]}let x=`---
`;y.forEach(a=>{let d=P[a];m.includes(a)?(x+=`${a}:
`,d.forEach(F=>{x+=`  - ${F}
`})):x+=`${a}: ${d[0]||""}
`}),Object.keys(n).forEach(a=>{if(!y.includes(a)){let d=n[a];m.includes(a)?(x+=`${a}:
`,d.forEach(F=>{x+=`  - ${F}
`})):x+=`${a}: ${d[0]||""}
`}}),x+="---";let N=o.slice(c);x+=N,await this.app.vault.modify(s,x),new i.Notice("Properties standardized using template.")}async convertWikilinksForAstro(s,e){if(!(e instanceof i.TFile)){new i.Notice("No active file.");return}let l=s.getValue(),h=/\.(png|jpg|jpeg|gif|svg)$/i;l=l.replace(/\[\[([^\]|]+)(\|([^\]]+))?\]\]/g,(o,g,c,p)=>{if(h.test(g))return o;let n=p||g.replace(/\.md$/,""),m=this.toKebabCase(g.replace(/\.md$/,"")),r=this.settings.linkBasePath;return r.startsWith("/")||(r="/"+r),r.endsWith("/")||(r=r+"/"),`[${n}](${r}${m}/)`}),l=l.replace(/\[([^\]]+)\]\(([^)]+\.md)\)/g,(o,g,c)=>{if(h.test(c)||c.match(/^https?:\/\//))return o;let p=this.toKebabCase(c.replace(/\.md$/,"")),n=this.settings.linkBasePath;return n.startsWith("/")||(n="/"+n),n.endsWith("/")||(n=n+"/"),`[${g}](${n}${p}/)`}),l=l.replace(/!\[(.*?)\]\(([^)]+)\)/g,o=>o),l=l.replace(/\{\{([^}]+)\}\}/g,(o,g)=>{if(h.test(g))return o;let c=this.toKebabCase(g.replace(".md","")),p=this.settings.linkBasePath;return p.startsWith("/")||(p="/"+p),p.endsWith("/")||(p=p+"/"),`[Embedded: ${g}](${p}${c}/)`}),s.setValue(l),new i.Notice("All internal links converted for Astro.")}async loadSettings(){this.settings=Object.assign({},R,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},T=class extends i.Modal{constructor(s,e,t,l="post"){super(s);this.file=e,this.plugin=t,this.type=l}onOpen(){let{contentEl:s}=this;s.empty(),s.createEl("h2",{text:this.type==="post"?"New Blog Post":"New Page"}),s.createEl("p",{text:`Enter a title for your ${this.type}:`}),this.titleInput=s.createEl("input",{type:"text",placeholder:this.type==="post"?"My Awesome Blog Post":"My Awesome Page",cls:"astro-composer-title-input"}),this.titleInput.focus();let e=s.createDiv({cls:"astro-composer-button-container"}),t=e.createEl("button",{text:"Cancel",cls:"astro-composer-cancel-button"});t.onclick=()=>this.close();let l=e.createEl("button",{text:"Create",cls:["astro-composer-create-button","mod-cta"]});l.onclick=()=>this.createEntry(),this.titleInput.addEventListener("keypress",h=>{h.key==="Enter"&&this.createEntry()})}async createEntry(){let s=this.titleInput.value.trim();if(!s){new i.Notice("Please enter a title.");return}try{let e=await this.plugin.createFile(this.file,s,this.type);e&&this.plugin.settings.autoInsertProperties&&await this.plugin.addPropertiesToFile(e,s,this.type)}catch(e){new i.Notice(`Error creating ${this.type}: ${e.message}.`)}this.close()}onClose(){let{contentEl:s}=this;s.empty()}},M=class extends i.PluginSettingTab{constructor(s,e){super(s,e);this.autoRenameContainer=null;this.postsFolderContainer=null;this.onlyAutomateContainer=null;this.creationModeContainer=null;this.indexFileContainer=null;this.excludedDirsContainer=null;this.underscorePrefixContainer=null;this.autoInsertContainer=null;this.pagesFieldsContainer=null;this.plugin=e}display(){let{containerEl:s}=this;s.empty(),new i.Setting(s).setName("Automate post creation").setDesc("Automatically show title dialog for new .md files, rename them based on the title, and insert properties if enabled.").addToggle(e=>e.setValue(this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.automatePostCreation=t,this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings(),this.plugin.registerCreateEvent(),this.updateConditionalFields()})),this.autoRenameContainer=s.createDiv({cls:"auto-rename-fields"}),this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none",this.autoInsertContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.autoInsertContainer).setName("Auto-insert properties").setDesc("Automatically insert the properties template when creating new files (requires 'Automate post creation' to be enabled).").addToggle(e=>e.setValue(this.plugin.settings.autoInsertProperties).setDisabled(!this.plugin.settings.automatePostCreation).onChange(async t=>{this.plugin.settings.autoInsertProperties=t,await this.plugin.saveSettings()})),this.postsFolderContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.postsFolderContainer).setName("Posts folder").setDesc("Folder name for blog posts (leave blank to use the vault folder). You can specify the default location for new notes in Obsidian's 'Files and links' settings.").addText(e=>e.setPlaceholder("Enter folder path").setValue(this.plugin.settings.postsFolder).onChange(async t=>{this.plugin.settings.postsFolder=t,await this.plugin.saveSettings()})),this.onlyAutomateContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.onlyAutomateContainer).setName("Only automate in this folder").setDesc("When enabled, automation will only trigger for new .md files within the specified Posts folder and subfolders.").addToggle(e=>e.setValue(this.plugin.settings.onlyAutomateInPostsFolder).onChange(async t=>{this.plugin.settings.onlyAutomateInPostsFolder=t,await this.plugin.saveSettings(),this.updateExcludedDirsField()})),this.excludedDirsContainer=this.autoRenameContainer.createDiv({cls:"excluded-dirs-field"}),this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block",new i.Setting(this.excludedDirsContainer).setName("Excluded directories").setDesc("Directories to exclude from automatic post creation (e.g., pages|posts/example). Excluded directories and their child folders will be ignored. Use '|' to separate multiple directories.").addText(e=>e.setPlaceholder("pages|posts/example").setValue(this.plugin.settings.excludedDirectories).onChange(async t=>{this.plugin.settings.excludedDirectories=t,await this.plugin.saveSettings()})),this.creationModeContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.creationModeContainer).setName("Creation mode").setDesc("How to create new posts: file-based or folder-based with index.md.").addDropdown(e=>e.addOption("file","File-based (post-title.md)").addOption("folder","Folder-based (post-title/index.md)").setValue(this.plugin.settings.creationMode).onChange(async t=>{this.plugin.settings.creationMode=t,await this.plugin.saveSettings(),this.updateIndexFileField()})),this.indexFileContainer=this.autoRenameContainer.createDiv({cls:"index-file-field"}),this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none",new i.Setting(this.indexFileContainer).setName("Index file name").setDesc("Name for the main file in folder-based mode (without .md extension).").addText(e=>e.setPlaceholder("index").setValue(this.plugin.settings.indexFileName).onChange(async t=>{this.plugin.settings.indexFileName=t||"index",await this.plugin.saveSettings()})),this.underscorePrefixContainer=this.autoRenameContainer.createDiv(),new i.Setting(this.underscorePrefixContainer).setName("Use underscore prefix for drafts").setDesc("Add an underscore prefix (_post-title) to new notes by default when enabled. This hides them from Astro, which can be helpful for post drafts. Disable to skip prefixing.").addToggle(e=>e.setValue(this.plugin.settings.enableUnderscorePrefix).onChange(async t=>{this.plugin.settings.enableUnderscorePrefix=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Link base path").setDesc("Base path for converted links (e.g., /blog/, leave blank for root domain).").addText(e=>e.setPlaceholder("/blog/").setValue(this.plugin.settings.linkBasePath).onChange(async t=>{this.plugin.settings.linkBasePath=t,await this.plugin.saveSettings()})),new i.Setting(s).setName("Date format").setDesc("Format for the date in properties (e.g., YYYY-MM-DD, MMMM D, YYYY, YYYY-MM-DD HH:mm).").addText(e=>e.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async t=>{this.plugin.settings.dateFormat=t||"YYYY-MM-DD",await this.plugin.saveSettings()})),new i.Setting(s).setName("Properties template").addTextArea(e=>{let t=this.plugin;return e.setPlaceholder(`---
title: "{{title}}"
date: {{date}}
tags: []
---
`).setValue(t.settings.defaultTemplate).onChange(async l=>{t.settings.defaultTemplate=l,await t.saveSettings()}),e.inputEl.classList.add("astro-composer-template-textarea"),e}).then(e=>{e.descEl.empty();let t=e.descEl.createEl("div");t.innerHTML="Used for new posts and when standardizing properties.<br />Variables include {{title}} and {{date}}.<br />Do not wrap {{date}} in quotes as it represents a datetime value, not a string.<br />The 'standardize properties' command ignores anything below the second '---' line."}),new i.Setting(s).setName("Automate page creation").setDesc("Enable automatic page creation in a specified folder.").addToggle(e=>e.setValue(this.plugin.settings.enablePages).onChange(async t=>{this.plugin.settings.enablePages=t,await this.plugin.saveSettings(),this.plugin.registerCreateEvent(),this.updatePagesFields()})),this.pagesFieldsContainer=s.createDiv(),this.pagesFieldsContainer.style.display=this.plugin.settings.enablePages?"block":"none",new i.Setting(this.pagesFieldsContainer).setName("Pages folder").setDesc("Folder for pages (leave blank to disable). Posts automation will exclude this folder.").addText(e=>e.setPlaceholder("Enter folder path").setValue(this.plugin.settings.pagesFolder).onChange(async t=>{this.plugin.settings.pagesFolder=t,await this.plugin.saveSettings()})),new i.Setting(this.pagesFieldsContainer).setName("Page properties template").addTextArea(e=>{let t=this.plugin;return e.setPlaceholder(`---
title: "{{title}}"
description: ""
---
`).setValue(t.settings.pageTemplate).onChange(async l=>{t.settings.pageTemplate=l,await t.saveSettings()}),e.inputEl.classList.add("astro-composer-template-textarea"),e}).then(e=>{e.descEl.empty();let t=e.descEl.createEl("div");t.innerHTML="Used for new pages and when standardizing properties.<br />Variables include {{title}} and {{date}}.<br />Do not wrap {{date}} in quotes as it represents a datetime value, not a string.<br />The 'standardize properties' command ignores anything below the second '---' line."}),this.updateConditionalFields(),this.updateIndexFileField(),this.updateExcludedDirsField(),this.updatePagesFields()}updateConditionalFields(){this.autoRenameContainer&&(this.autoRenameContainer.style.display=this.plugin.settings.automatePostCreation?"block":"none")}updateIndexFileField(){this.indexFileContainer&&(this.indexFileContainer.style.display=this.plugin.settings.creationMode==="folder"?"block":"none")}updateExcludedDirsField(){this.excludedDirsContainer&&(this.excludedDirsContainer.style.display=this.plugin.settings.onlyAutomateInPostsFolder?"none":"block")}updatePagesFields(){this.pagesFieldsContainer&&(this.pagesFieldsContainer.style.display=this.plugin.settings.enablePages?"block":"none")}};
